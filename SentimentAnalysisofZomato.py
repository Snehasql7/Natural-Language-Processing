# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ecmut5c0e_peyv530cvyDOK_yL9yjOCa
"""

#import the libraries
import pandas as pd
import numpy as np
from textblob import TextBlob
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the data
from google.colab import files
uploaded = files.upload()

# Get the data
df = pd.read_csv('zomato_reviews.csv')

def get_sentiment(review_text):
    """
    Performs sentiment analysis on a review text using TextBlob.
    Returns the sentiment polarity score and sentiment class.
    """
    blob = TextBlob(str(review_text))
    sentiment_score = blob.sentiment.polarity
    
    if sentiment_score > 0:
        sentiment_class = 'Positive'
    elif sentiment_score < 0:
        sentiment_class = 'Negative'
    else:
        sentiment_class = 'Neutral'
    
    return sentiment_score, sentiment_class

# Handle missing values
df.dropna(subset=['review'], inplace=True)

# Apply sentiment analysis function to reviews
df['Sentiment_Score'], df['Sentiment_Class'] = zip(*df['review'].apply(get_sentiment))

# Prepare the data for training
X = df['review'].values
y = df['Sentiment_Class'].values

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['review'], df['Sentiment_Class'], test_size=0.3, random_state=42)

# Apply sentiment analysis to training data
X_train_blob = [TextBlob(str(review)) for review in X_train]
X_train_sentiment = [blob.sentiment.polarity for blob in X_train_blob]

# Fit the logistic regression model
lr = LogisticRegression(random_state=42)
lr.fit(np.array(X_train_sentiment).reshape(-1, 1), y_train)

# Apply sentiment analysis to testing data
X_test_blob = [TextBlob(str(review)) for review in X_test]
X_test_sentiment = [blob.sentiment.polarity for blob in X_test_blob]

# Predict sentiment classes for testing data
y_pred = lr.predict(np.array(X_test_sentiment).reshape(-1, 1))

# Print dataset with sentiment class and score
print(df)

# Create histogram of sentiment scores
plt.hist(df['Sentiment_Score'], bins='auto')
plt.xlabel('Sentiment Score')
plt.ylabel('Number of Reviews')
plt.title('Distribution of Sentiment Scores')
plt.show()

# Calculate and print accuracy score
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)